
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> s1 = new HashSet<>();
        HashSet<Integer> s2 = new HashSet<>();

        for(int i : nums1)
        {
            s1.add(i);
        }
        for(int i : nums2){
            if(s1.contains(i)) s2.add(i);
        }

        int[] res = new int[s2.size()];
        int i = 0;
        for(int n : s2)
        {
            res[i++] = n;
        }
        return res;
    }
}


public static int findShortestSubArray(int[] nums) {
        Map<Integer, Integer> firstIndex = new HashMap<>();
        Map<Integer, Integer> lastIndex = new HashMap<>();
        Map<Integer, Integer> frequency = new HashMap<>();

        int maxFreq = 0;

        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];

            lastIndex.put(num, i);

            firstIndex.putIfAbsent(num, i);

            frequency.put(num, frequency.getOrDefault(num, 0) + 1);

            maxFreq = Math.max(maxFreq, frequency.get(num));
        }

        int minLength = Integer.MAX_VALUE;

        for (int num : nums) {
            if (frequency.get(num) == maxFreq) {
                minLength = Math.min(minLength, lastIndex.get(num) - firstIndex.get(num) + 1);

                frequency.put(num, 0);
            }
        }

        return minLength;
    }
