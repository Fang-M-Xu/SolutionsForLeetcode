import java.math.BigDecimal;
class Solution {
    int len = 0;
    public List<List<Integer>> fourSum(int[] nums, int target) {
        len = nums.length;
        Arrays.sort(nums);
        BigDecimal target_big = new BigDecimal(target);
        List<List<Integer>> result = KSum(nums,target_big,4,0);
        return result;
    }

    private List<List<Integer>> KSum(int[] nums, BigDecimal target, int k,int sub_index){
        List<List<Integer>> result = new ArrayList<>();
        if(len<4||sub_index>len-2){
            return result;
        }
        if(k==2){
            int left = sub_index;
            int right = len-1;
            while(left<right){
                int compare = target.subtract(new BigDecimal(nums[left])).compareTo(new BigDecimal(nums[right]));
                if(compare==0){
                    List<Integer> tempList = new ArrayList<>();
                    tempList.add(nums[left]);
                    tempList.add(nums[right]);
                    result.add(tempList);
                    while (left<right&&nums[left]==nums[left+1]) left++;
                    while(left<right&&nums[right]==nums[right-1]) right--;
                    left++;
                    right--;
                }else if(compare==1){
                    left++;
                }else if(compare==-1){
                    right--;
                }
            }
        }else{
            for(int i=sub_index; i<len-k+1; i++){
                BigDecimal nums_big =target.subtract(new BigDecimal(nums[i]));
                List<List<Integer>> attempResult = KSum(nums,nums_big,k-1,i+1);
                for(List<Integer> item:attempResult){
                    item.add(0,nums[i]);
                }
                result.addAll(attempResult);
                while (i<len-1&&nums[i]==nums[i+1]) i++;
            }
        }
        return result;
    }
}
========================


private static ArrayList<List<Integer>> kSum(int[] nums, int target, int k, int index) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        if(index >= len) {
            return res;
        }
        if(k == 2) {
            int i = index, j = len - 1;
            while(i < j) {
                //find a pair
                if(target - nums[i] == nums[j]) {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(target-nums[i]);
                    res.add(temp);
                    //skip duplication
                    while(i<j && nums[i]==nums[i+1]) i++;
                    while(i<j && nums[j-1]==nums[j]) j--;
                    i++;
                    j--;
                    //move left bound
                } else if (target - nums[i] > nums[j]) {
                    i++;
                    //move right bound
                } else {
                    j--;
                }
            }
        } else{
            for (int i = index; i < len - k + 1; i++) {
                //use current number to reduce ksum into k-1sum
                ArrayList<List<Integer>> temp = kSum(nums, target - nums[i], k-1, i+1);
                if(temp != null){
                    //add previous results
                    for (List<Integer> t : temp) {
                        t.add(0, nums[i]);
                    }
                    res.addAll(temp);
                }
                while (i < len-1 && nums[i] == nums[i+1]) {
                    //skip duplicated numbers
                    i++;
                }
            }
        }
        return res;
    }


 int start=0;
        int end=arr.length-1; 5
        int ans=arr.length;
        while(start<=end)
        {
            int mid=start+(end-start)/2; 2
            if(arr[mid]-mid-1>=k) 
            {
                ans=mid;
                end=mid-1;
            }
            else
                start=mid+1;
        }
        return ans+k;
    }

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> s1 = new HashSet<>();
        HashSet<Integer> s2 = new HashSet<>();

        for(int i : nums1)
        {
            s1.add(i);
        }
        for(int i : nums2){
            if(s1.contains(i)) s2.add(i);
        }

        int[] res = new int[s2.size()];
        int i = 0;
        for(int n : s2)
        {
            res[i++] = n;
        }
        return res;
    }
}


public static int findShortestSubArray(int[] nums) {
        Map<Integer, Integer> firstIndex = new HashMap<>();
        Map<Integer, Integer> lastIndex = new HashMap<>();
        Map<Integer, Integer> frequency = new HashMap<>();

        int maxFreq = 0;

        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];

            lastIndex.put(num, i);

            firstIndex.putIfAbsent(num, i);

            frequency.put(num, frequency.getOrDefault(num, 0) + 1);

            maxFreq = Math.max(maxFreq, frequency.get(num));
        }

        int minLength = Integer.MAX_VALUE;

        for (int num : nums) {
            if (frequency.get(num) == maxFreq) {
                minLength = Math.min(minLength, lastIndex.get(num) - firstIndex.get(num) + 1);

                frequency.put(num, 0);
            }
        }

        return minLength;
    }
